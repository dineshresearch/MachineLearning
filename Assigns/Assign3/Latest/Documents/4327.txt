No Silver Bullet
No Silver Bullet - Essence and Accidents of Software Engineering is a widely discussed paper on software engineering written by Fred Brooks in 1986. Brooks argues that "there is no single development, in either technology or management technique, which by itself promises even one order-of-magnitude [tenfold] improvement within a decade in productivity, in reliability, in simplicity." He also states that "we cannot expect ever to see two-fold gains every two years" in software development, unlike there is in hardware development.
Brooks makes a distinction between accidental complexity and essential complexity, and asserts that most of what software engineers now do is devoted to the essential, so shrinking all the accidental activities to zero will not give an order-of-magnitude improvement. Brooks advocates addressing the essential parts of the software process. While Brooks insists that there is no one silver bullet, he believes that a series of innovations attacking essential complexity could lead to significant (perhaps greater than 10 fold in a 10 year period) improvements.
The article, and Brooks's own reflections on it, "'No Silver Bullet' Refired," can be found in the anniversary edition of The Mythical Man-Month.

At the heart of the argument is the distinction between accidental complexity and essential complexity. Accidental complexity relates to problems that we create on our own and can be fixed—for example, the details of writing and optimizing assembly code or the delays caused by batch processing. Essential complexity is caused by the problem to be solved, and nothing can remove it—if users want a program to do 30 different things, then those 30 things are essential and the program must do those 30 different things.
Brooks claims that we have cleaned up much of the accidental complexity, and today's programmers spend the majority of their time addressing essential complexity. One technology that has made significant improvement in the area of accidental complexity was the invention of high level languages, such as Fortran. Today's languages, such as C, C++, C# and Java are considered to be improvements, but not of the same order of magnitude.
Brooks advocates "growing" software organically through incremental development. He suggests devising and implementing the main and subprograms right at the beginning, filling in the working sub-sections later. He believes that programming this way excites the engineers and provides a working system at every stage of development. (This idea can be seen as a precursor of agile software development.)
Brooks goes on to argue that there is a difference between "good" designers and "great" designers. He postulates that as programming is a creative process: some designers are inherently better than others. He suggests that there is as much as a 10-fold difference between an ordinary designer and a great one. He then advocates treating star designers equally well as star managers, providing them not just with equal remuneration, but also all the perks of higher status (large office, staff, travel funds, etc.).



