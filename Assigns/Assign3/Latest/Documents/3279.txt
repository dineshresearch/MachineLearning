_NSAKEY
_NSAKEY is a variable name discovered in Windows NT 4 Service Pack 5 (which had been released unstripped of its symbolic debugging data) in August 1999 by Andrew D. Fernandes of Cryptonym Corporation. That variable contained a 1024-bit public key.

Microsoft's operating systems require all cryptography suites that can go into its operating systems to have a digital signature. When only Microsoft-approved cryptography suites can be used, complying with the Export Administration Regulations (EAR) of the US Department of Commerce, Bureau of Export Administration (BXA) (now known as the Bureau of Industry and Security or BIS) is easier. It was already known that Microsoft uses two keys, a primary and a spare, either of which can create valid signatures. The primary key is stored in the variable _KEY; Fernandes had discovered the second key.
Fernandes published his discovery, touching off a flurry of speculation and development of numerous conspiracy theories. If the private half of that key were actually owned by the United States National Security Agency, the NSA (as suggested by the name), it would allow that intelligence agency to subvert any Windows users' security.
In addition, Windows 2000 had a third key with an unknown purpose, found by Dr. Nicko van Someren.[1] Microsoft claims this is only in beta builds of Windows 2000 and that its use was for signing Cryptographic Service Providers.[2] It did not have any clear purposes according to van Someren,[3] and it is unclear whether it is present in final builds or just beta builds. (There is no 'Back Door' in Windows conflicts with Microsoft, the NSA, and You and How NSA access was built into Windows)

Microsoft, however, denied all such suggestions. "This report is inaccurate and unfounded. The key in question is a Microsoft key. It is maintained and safeguarded by Microsoft, and we have not shared this key with the NSA or any other party."[4] The key's symbol was "_NSAKEY" because the NSA is the technical review authority for U.S. export controls, and the key ensures compliance with U.S. export laws.
The Computers, Freedom and Privacy 2000 (CFP2000) conference was held from 4-7 April 2000 in Toronto, Canada. During a presentation to that conference, Duncan Campbell, Senior Research Fellow at the Electronic Privacy Information Center (EPIC), mentioned the _NSAKEY controversy as an example of an outstanding issue related to security and surveillance.
Richard Purcell, Microsoftâ€™s Director of Corporate Privacy, approached Campbell after his presentation and expressed a wish to clear up the confusion and doubts about _NSAKEY. Immediately after the conference, Scott Culp, of the Microsoft Security Response Center, contacted Campbell and offered to answer his questions. Their correspondence began cordially but soon became strained; Campbell apparently felt Culp was being evasive and Culp apparently felt that Campbell was hostilely repeating questions that he had already answered. On 28 April 2000, Culp stated that "we have definitely reached the end of this discussion ... [which] is rapidly spiraling into the realm of conspiracy theory"[5] and Campbell's further enquiries went unanswered.

After a great deal of discussion featuring wildly varying levels of cryptographic expertise, various conclusions have been presented. To begin with, some observers, including Fernandes, doubt the BXA's EAR have specific requirements for backup keys. However, none of the commentators claim the legal expertise necessary to authoritatively discuss that document.
Microsoft insists that the second key is present as a backup to guard against the possibility of losing the primary secret key. Fernandes and Bruce Schneier both doubt this explanation, pointing out that the generally accepted way to guard against loss of a secret key is secret splitting, which would divide the key into several different parts, which would then be distributed throughout senior management.[6] Such a plan would be far more robust than simply using two keys; if the second key is also lost, Microsoft would need to patch or upgrade every copy of Windows in the world, as well as every cryptographic module it has ever signed.
On the other hand, if Microsoft failed to think about the consequences of key loss and created a first key without using secret splitting (and did so in secure hardware which doesn't allow protection to be weakened after key generation), and the NSA pointed out the problem as part of the review process, it might explain both why Microsoft weakened their scheme with a second key and why the new one was called _NSAKEY. (The second key might be backed up using secret splitting, so losing both keys needn't be a problem.)
Another line of speculation concludes that Microsoft included a second key to be able to sign cryptographic modules outside the United States, while still complying with the BXA's EAR. If cryptographic modules were to be signed in multiple locations, using multiple keys is a reasonable approach. However, no cryptographic module has ever been found to be signed by _NSAKEY and Microsoft denies that any other certification authority exists.
A third possibility is that the _NSAKEY enables the NSA or other agencies to sign their own cryptographic modules without being required to disclose those modules to Microsoft, which would allow them to create modules in-house that implement classified algorithms. Of course this capability would also enable an agency to sign modules that could be used to undermine the security of any Windows installation. Such speculation is usually followed by cynical comments on such undermining not being difficult even without access to the cryptographic API.[citation needed]
Microsoft denies that the NSA has access to the _NSAKEY secret key.
The key is still present in all versions of Windows, though it has been renamed "_KEY2."
It is possible to remove the second, _NSAKEY using the following:
There is good news among the bad, however. It turns out that there is a flaw in the way the "crypto_verify" function is implemented. Because of the way the crypto verification occurs, users can easily eliminate or replace the NSA key from the operating system without modifying any of Microsoft's original components. Since the NSA key is easily replaced, it means that non-US companies are free to install "strong" crypto services into Windows, without Microsoft's or the NSA's approval. Thus the NSA has effectively removed export control of "strong" crypto from Windows. A demonstration program that replaces the NSA key can be found on Cryptonym's website.[7]

In September 1999, an anonymous researcher reverse-engineered both the primary key and the _NSAKEY into PGP-compatible format and published them to the key servers.[8]




