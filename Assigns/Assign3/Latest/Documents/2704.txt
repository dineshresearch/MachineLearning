Educational programming language
An educational programming language is a programming language that is designed primarily as a learning instrument and not so much as a tool for writing real-world application programs.

Many educational programming languages position themselves inside a learning path, that is a sequence of languages each designed to build on the others moving a student from easy to understand and entertaining environments to full professional environments. Some of the better known are presented below.

As part of the OLPC project small talk has developed a flow of languages each designed to act as an introduction to the other. The structure is Scratch to Etoys to Squeak to any Smalltalk[1] . Each provides graphical environments which may be used not just to teach programming concepts to kids, but also physics and mathematics simulations, story-telling exercises, etc, through the use of constructive learning. Squeak as well as other Smalltalks are a fully featured application development language, that has been around and well respected for decades while Scratch is a children's learning tool.

Sun's recommended path is Greenfoot to BlueJ to Netbeans/BlueJ to Netbeans/Java[5]

Lisp is the second oldest family of computer languages in use today, and as such has a host of dialects and implementations at a wide range of difficulties. Lisp was originally created as a practical mathematical notation for computer programs, based on lambda calculus, which makes it particularly well suited for teaching theories of computation. As one of the earliest programming languages, Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, object-oriented programming, and the self-hosting compiler all of which are useful for learning computer science.
The name LISP derives from "LISt Processing language". Linked lists are one of Lisp languages' major data structures, and Lisp source code is itself made up of lists. As a result, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or even new domain-specific programming languages embedded in Lisp. So Lisps are useful for learning language design, and creating custom languages.
A reasonable learning path would be Logo followed by any educational variant such as Scheme or newLISP, followed by a professional variant such as Common LISP.
Over a short period, many universities in the US and around the world switched their Ô¨Årst course to sicp and Scheme. The book became a major bestseller for MIT Press. Along with sicp, the Scheme programming language (became widely used. It was no longer the subject of a few individual courses at Indiana University, MIT, and Yale, but the language of choice in introductory courses all over the world.[11]

BASIC is a language invented in 1964 to provide computer access to non-science students. It became popular on mini computers during the 1960s, and became the standard computing language for microcomputers during the late 1970s and early 1980s. The goals of BASIC were focused on the needs of learning to program easily: be easy for beginners to use, be interactive, provide clear and friendly error messages, respond quickly, do not require an understanding of computer hardware or operating systems. What made basic particularly useful for education was the small size of programs. Useful programs to illustrate a concept could be written in a dozen lines. At the same time BASIC did not require mathematical or computer science sophistication. [13] Basic continues to this day to be a language which is frequently self taught with excellent tutorials and implementations. See List of BASIC dialects by platform for a complete list. Basic offers a learning path from learning oriented basics such as: Microsoft Small Basic, BASIC-256 and SiMPLE to more full featured BASICs like Visual Basic .NET and Gambas.



