User interface design
User interface design or user interface engineering is the design of computers, appliances, machines, mobile communication devices, software applications, and websites with the focus on the user's experience and interaction. The goal of user interface design is to make the user's interaction as simple and efficient as possible, in terms of accomplishing user goals—what is often called user-centered design. Good user interface design facilitates finishing the task at hand without drawing unnecessary attention to itself. Graphic design may be utilized to apply a theme or style to the interface without compromising its usability. The design process of an interface must balance the meaning of its visual elements that conform the mental model of operation, and the functionality from a technical engineering perspective, in order to create a system that is both usable and easy to adapt to the changing user needs.
User Interface design is involved in a wide range of projects from computer systems, to cars, to commercial planes; all of these projects involve much of the same basic human interaction yet also require some unique skills and knowledge. As a result, user interface designers tend to specialize in certain types of projects and have skills centered around their expertise, whether that be software design, user research, web design, or industrial design.

There are several phases and processes in the user interface design some of which are more demanded upon than others depending on the project. (note for the remainder of this section the word system is used to denote any project whether it is a web site, application, or device)
User interface design requires a good understanding of user needs.


The MSN User Experience Team developed new user-centered methods to provide structured user input on the visual design of the newly-released MSN Explorer, an integrated software package. In the final product, users rated "appearance" above all of the product's features. This case describes how the MSN User Experience Team derived a design direction to set the most appropriate pace of visual change for millions of users with widely variant preferences. It discloses how these new methods maximized the product's visual appeal to the widest segment of the potential user base. The methods included design mark-up, a semantic design-description task, a statement rating task, a semantic desirability group card sort task, and a modified focus group discussion. This case documents the value of these new methods in predicting user reaction to visual design. Lessons learned from this collaboration are discussed from three perspectives: user experience management, design and usability.[1]

HUMANOID is a user interface design tool that lets designers express abstract conceptualizations of an interface in an executable form, allowing designers to experiment with scenarios and dialogues even before the application model is completely worked out. Three properties of the HUMANOID approach allow it to do so: a modularization of design issues into independent dimensions, support for multiple levels of specificity in mapping application models to user interface constructs, and mechanisms for constructing executable default user interface implementations from whatever level of specificity has been provided by the designer.[2]

A user interface software tool helps developers design and implement the user interface. Research on past tools has had enormous impact on today's developers—virtually all applications today are built using some form of user interface tool. In this article, we consider cases of both success and failure in past user interface tools. From these cases we extract a set of themes which can serve as lessons for future work. Using these themes, past tools can be characterized by what aspects of the user interface they addressed, their threshold and ceiling, what path of least resistance they offer, how predictable they are to use, and whether they addressed a target that became irrelevant. We believe the lessons of these past themes are particularly important now, because increasingly rapid technological changes are likely to significantly change user interfaces. We are at the dawn of an era where user interfaces are about to break out of the “desktop” box where they have been stuck for the past 15 years. The next millennium will open with an increasing diversity of user interface on an increasing diversity of computerized devices. These devices include hand-held personal digital assistants (PDAs), cell phones, pages, computerized pens, computerized notepads, and various kinds of desk and wall size-computers, as well as devices in everyday objects (such as mounted on refrigerators, or even embedded in truck tires). The increased connectivity of computers, initially evidenced by the World Wide Web, but spreading also with technologies such as personal-area networks, will also have a profound effect on the user interface to computers. Another important force will be recognition-based user interfaces, especially speech, and camera-based vision systems. Other changes we see are an increasing need for 3D and end-user customization, programming, and scripting. All of these changes will require significant support from the underlying user interface software tools.[3]

Peridot is an experimental tool that allows designers to create user interface components without conventional programming. The designer draws pictures of what the interface should look like and then uses the mouse and other input devices to demonstrate how the interface should operate. Peridot generalizes from these example pictures and actions to create parameterized procedures, such as those found in conventional user interface libraries such as the Macintosh Toolbox. Peridot uses visual programming, programming by example, constraints, and plausible inferencing to allow nonprogrammers to create menus, buttons, scroll bars, and many other interaction techniques easily and quickly. Peridot created its own interface and can create almost all of the interaction techniques in the Macintosh Toolbox. Therefore, Peridot demonstrates that it is possible to provide sophisticated programming capabilities to nonprogrammers in an easy-to-use manner and still have sufficient power to generate interesting and useful programs.[4]

An important aspect of the empirical study of user experience is the process by which users form aesthetic and other judgments of interactive products. The current study extends previous research by presenting test users with a context (mode of use) in which to make their judgments, using sets of web pages from specific domains rather than unrelated pages, studying the congruence of perceptions of aesthetic value over time, including judgments after use of a web site, manipulating the aesthetic design of web pages and studying the relationship between usability and aesthetic value. The results from two experiments demonstrate that context increases the stability of judgments from perceptions after brief exposure to those after self-paced exposure and from perceptions after self-paced exposure to those of after site use. Experiment 1 shows that relatively attractive pages are preferred over relatively unattractive pages after brief exposure, but only if no context is provided. Experiment 2 shows that after brief exposure, classically aesthetic pages that are information oriented are rated as more attractive than expressively aesthetic pages. Perceptions are not correlated with measures of task performance or mental effort. We conclude that context is a pivotal factor influencing the stability of users' perceptions, which must be explicitly addressed in the study of users' product experience. Furthermore, the type of aesthetics that is relevant to users' perceptions appears to depend on the application domain. The principle 'what is beautiful is usable' is not confirmed.[5]




