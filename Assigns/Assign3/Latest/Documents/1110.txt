Minesweeper (computer game)
Minesweeper is a single-player computer game. The object of the game is to clear an abstract minefield without detonating a mine. The game has been written for many system platforms in use today- including the Minesweeper for the Windows platform, which has come bundled with versions of the operating system from 3.1 and on.

When the game is started, the player is presented with a grid of blank squares. The size of the grid is dependent on the skill level chosen by the player, with higher skill levels having larger grids. If the player clicks on a square without a mine, a digit is revealed in that square, the digit indicating the number of adjacent squares (typically, out of the possible 8) which contain mines. By using logic, players can in many instances use this information to deduce that certain other squares are mine-free (or mine-filled), and proceed to click on additional squares to clear them or mark them with flag graphics to indicate the presence of a mine.
The player can place a flag graphic on any square believed to contain a mine by right-clicking on the square. Right-clicking on a square that is flagged will sometimes, according to settings, change the flag graphic into a question mark to indicate that the square may or may not contain a mine. Right-clicking on a square marked with a question mark will set the square back to its original state. Squares marked with a flag cannot be cleared by left-clicking on them, though question marks can be cleared in the same manner as normal squares. If the question mark state is deemed unnecessary, it can be disabled so that right clicking on a flagged mine will set it directly to its original state.
In some versions, the expedient of middle-clicking (or clicking the left and right buttons simultaneously) on a number having at least as many adjacent flags as the value of the number reveals all the unmarked squares neighboring the number; however, the game is forfeit in the event a related flag was placed in error. Some implementations allow for the mouse to be moved with the right mouse-button depressed after flagging a mine; the player can then click on multiple squares while dragging with the right mouse-button. As an alternative to clicking both buttons at the same time players can also middle-click or shift-click on fully-flagged numbers.
Some implementations of Minesweeper will set up the board by never placing a mine on the first square clicked, or by arranging the board so that the solution does not require guessing.

The basic gameplay style became a popular segment of the puzzle game genre during the 1980s, with such titles as Mined-Out (Quicksilva, 1983), Yomp (Virgin Interactive, 1983), and Cube. Cube was succeeded by Relentless Logic (or RLogic for short), by Conway, Hong, and Smith, available for MS-DOS as early as 1985; the player took the role of a private in the United States Marine Corps, delivering an important message to the U.S. Command Center. RLogic had greater similarity to Minesweeper than to Cube in concept, but a number of differences exist:
The gameplay mechanics of Minesweeper are included in a variety of other software titles, including the mini-game Vinesweeper implemented into the MMORPG Runescape; in this iteration (written by Jagex developer Danny J), the Minesweeper gameplay is given a large multiplayer aspect and the 'game board' adopts a continually resetting timer. This allows for a never-ending game of Minesweeper where the skill is awarded assessed in points rather than 'game completion'.

Versions of Minesweeper are frequently bundled with operating systems and GUIs, including Minesweeper in Windows, KMines in KDE(Unix-like OSes), Gnomine in GNOME and MineHunt in Palm OS. Apart from the bundled versions, a huge number of clones of all shapes and sizes can be found on the Internet.
Variants of the basic game generally have differently shaped minefields in two and three dimensions, or various 2D layouts (such as triangular or hexagonal grids). For example, X11-based XBomb adds triangular and hexagonal grids, and Professional Minesweeper for Windows includes these and others.
A minigame in Sonic Battle is essentially a variation of Minesweeper.


There are many patterns of numbered squares that may arise during a game that can be recognized as allowing only one possible configuration of mines in their vicinity. In the interest of finishing quickly, it is often easiest to process the known patterns first, and continue on with the uncertain parts later. There are a few broad methods for solving problems in minesweeper games without guessing.

There are two special cases that are of extra interest when solving a board that can be solved using analysis of only one square and its surrounding squares[1]

To solve more complex puzzles, one needs to consider more than one square at a time. Some strategies that involve considering more than one number at a time:
One method that is commonly used in minesweeper AIs is to consider the board as a constraint satisfaction problem [2] [3].
The variables/unknowns are the unopened squares, and the constraints are the adjacent squares that are opened. The algorithm consists of trying every combination of mines that satisfies all the numbers in the adjacent squares, and making a conclusion from there. For large puzzles, this is a time-consuming process for a computer, but expert minesweepers might be able to quickly see which squares need this procedure, and where one might expect it to succeed. The two rules above are such special cases.
Example: A corner square and the 3 adjacent squares have been opened, and the numbers given revealed. The letters here are unopened squares and they are the variables.
Blindly trying every combination gives the 4 valid configurations (out of 25), namely {a,b,c,d,e} = {1,0,1,0,0}, {0,1,1,0,0}, {1,0,0,1,0} and {0,1,0,1,0}, where 1 represents a mine.
The only common number in all these configurations is that the variable e is never a mine. The conclusion is that in all possible valid configurations, e is safe, and one can safely open that square. Analogously, if a square is marked as mine in every valid combination, then the square must be a mine.
One can also think of this as a system of equations, where the variables must be in {0,1}. In the above example, the constraints gives that a+b=1, c+d=1 and a+b+c+d+e=2. The third equation can be reduced to 1+1+e=2 and hence the square e must be safe. This strategy is more similar to the human approach, but is harder to implement as a computer program.

Used at the end of a game, this can be used to clear a square when all other squares on the board are either safe or can be shown to be mines. Often these final squares are on walls or in corners.
In some versions of the game the number of mines on the field is known. Near the end when almost all the tiles are lifted, knowing the number of mines remaining can give some insight to otherwise unresolvable patterns.

In most implementations of Minesweeper, it is possible for a grid to be generated which cannot be solved without an element of guessing. For instance, in the following situation:
The player must guess whether  or  is the mine.
The constraint satisfaction problem above might help a little to estimate the likelihood that a square is a mine; list all the valid combinations and count how many times each square is occupied by a mine. If the density of mines is known (or estimated during the game), the player can pick the square that is least likely to contain a mine.
Another apparent instance of required guessing is when an unclicked square is completely surrounded by either mines, or a combination of mines and the perimeter of the game window (the latter being much more common). In this case, since no numbers touch the unclicked square, a player has no information about the likelihood of the unclicked square being a mine. However, there is still a good strategy when facing this situation that will allow the player to avoid simple guessing: simply play the rest of the game and ignore this square. If the spot is in fact a mine, it will be automatically flagged when all other squares in the game window have been either clicked or flagged by the player. If the spot is not a mine, it will not be automatically flagged, and the player will be able to safely click it in the knowledge that it is not a mine. This only happens in some implementations of the game.[citation needed]
Simon Tatham's variant, on its default settings, only generates puzzles that can be solved without guesswork[4]. The situation of squares surrounded by mines remains, but they will either all be mines or all be clear, and this becomes obvious at the end of the game. A few other variants eliminate guesswork by giving away the answer when a guess is required, or by allowing any guess to be correct when this is the case.[citation needed]

In 2000, Richard Kaye published a proof that it is NP-complete to determine whether a position in a Minesweeper game is consistent with some placement of mines. [5] Minesweeper is now mentioned in the Clay Mathematics Institute's unofficial description of the P versus NP problem. [6]

The difficulty of a given minesweeper board is often measured using the 3BV measure (abbreviated from Bechtel's Board Benchmark Value).

