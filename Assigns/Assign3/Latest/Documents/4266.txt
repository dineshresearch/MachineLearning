Big Design Up Front
Big Design Up Front (BDUF) is a term for any software development approach, in which the program's design is to be completed and perfected before that program's implementation is started. It is often associated with the waterfall model of software development.
The argument between the proponents and critics of BDUF has somewhat degenerated into a "holy war", with most people believing that a compromise between BDUF and the more extreme variants of agile software development is the best solution to most software development problems.

Proponents of BDUF argue that time spent in planning is a worthwhile investment, and reference numerous studies which have concluded that less time and effort is spent fixing a bug in the early stages of a software products lifecycle than when that same bug is found and must be fixed later. That is, it is much easier to fix a requirements bug in the requirements phase than to fix that same bug in the implementation phase, as to fix a requirements bug in the implementation phase requires scrapping at least some implementation and design work which has already been completed.
Joel Spolsky, a popular online commentator on software development, has argued strongly in favor of Big Design Up Front:[1]
"Many times, thinking things out in advance saved us serious development headaches later on. ... [on making a particular specification change] ... Making this change in the spec took an hour or two. If we had made this change in code, it would have added weeks to the schedule. I can’t tell you how strongly I believe in Big Design Up Front, which the proponents of Extreme Programming consider anathema. I have consistently saved time and made better products by using BDUF and I’m proud to use it, no matter what the XP fanatics claim. They’re just wrong on this point and I can’t be any clearer than that."
However, some argue that what Joel calls Big Design Up Front doesn't resemble the BDUF criticized by advocates of XP and other agile software development methodologies.[2][3][clarification needed]

Critics (notably those from an agile software development background) argue that BDUF is poorly adaptable to changing requirements, that its proponents are dinosaurs clinging to an outdated and invalidated methodology, and that BDUF assumes that designers are able to foresee problem areas without extensive prototyping and at least some investment into implementation. Also in most projects there is a significant lack of comprehensive written (or even well known) requirements. So in BDUF a lot of assumptions are made that later proove to be false but are designed and possibly already coded.


