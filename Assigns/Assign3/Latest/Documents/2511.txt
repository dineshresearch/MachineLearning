Gentoo Linux
Gentoo (pronounced /ˈdʒɛntuː/) is a computer operating system built on top of the Linux kernel and based on the Portage package management system. It is distributed as free software. Unlike a conventional software distribution, the user compiles the source code locally according to their chosen configuration. There are normally no precompiled binaries for software, continuing the tradition of the ports collection[1], although for convenience, some software packages are also available as precompiled binaries for various architectures. The development project and its products are named after the Gentoo penguin. Gentoo package management is designed to be modular, portable, easy to maintain, flexible, and optimized for the user's machine. Gentoo describes itself as a metadistribution, "because of its near-unlimited adaptability".[2]

Gentoo Linux was initially created by Daniel Robbins as the Enoch Linux distribution. The goal was to create a distribution without precompiled binaries that was tuned to the hardware and only included required programs.[3] At least one version of Enoch was distributed: version 0.75, in December 1999.[4]
Compilation issues revealed problems with the GNU Compiler Collection (GCC), used to build from source code. Daniel Robbins and the other contributors experimented with a fork of GCC known as EGCS developed by Cygnus Solutions. At this point, Enoch changed name to Gentoo Linux (the Gentoo species is the fastest swimming penguin). The modifications eventually became part of the official GCC (version 2.95), and other Linux distributions experienced similar speed increases.[5]
After problems with a bug on his own system, Robbins halted Gentoo Linux development and switched to FreeBSD for several months, later saying "I decided to add several FreeBSD features to make our autobuild system (now called Portage) a true next-generation ports system."[6]
Gentoo Linux 1.0 was released March 31, 2002.[7] In 2004, Robbins set up the non-profit Gentoo Foundation, transferred all copyrights and trademarks to it, and stepped down as Chief Architect of the project.[8]
The current Board of Trustees[9] is composed of five members who were announced (following an election) on March 2, 2008.[10] There is also a subsidiary seven-member Gentoo Council whose members decide on technical issues and policies.[11] The current Council members were elected over the period of August 17, 2007 to September 17, 2007 by 117 active Gentoo developers.[12]
The Gentoo Foundation is a 501(c)(6) non-profit foundation, registered in the State of New Mexico.[13] In late 2007, the Foundation's charter was revoked.[14] As of May 19, 2008, the State of New Mexico declared that the Gentoo Foundation, Inc. has returned to good standing and is free to do business.[15]

Although originally designed for the x86 architecture, it has been ported to many others. Currently it is officially supported and considered stable on x86, x86-64, IA-64, PA-RISC; PowerPC, PowerPC 970, SPARC 64-bit and DEC Alpha architectures.[16]. It is also officially supported but considered in development state on MIPS[17], PS3 Cell Processor[18], System Z/s390[19], ARM[20] and SuperH. Official support for 32-bit SPARC hardware has been dropped.[21]
Portability toward other operating systems, such as BSD-derived ones, is under active development by the Gentoo/Alt project. The Gentoo/FreeBSD project already has a working guide based on FreeSBIE[22], while Gentoo/NetBSD, Gentoo/OpenBSD and Gentoo/DragonFly are being developed.[23] There is also a project to get Portage working on OpenSolaris. There was an unofficial project to create a Gentoo port to GNU Hurd but it is inactive since 2006.[24]

Portage is Gentoo's package management system[25]. It is similar in idea to the BSD ports collections: the original design was based on FreeBSD ports. In contrast, the Portage tree does not contain directories of Makefiles, but of so-called ebuilds, bash scripts that describe separate functions to download, configure, make, install and remove a package and additional functions that can be used to set up the operating environment for a package.
Portage's main utility is emerge[26], which is written in Python and can be used by privileged users to easily inspect and alter the set of installed packages on a Gentoo operating system. Whereas emerge used to operate in a similar way to other ports collections, by entering a directory in the tree and using emerge (instead of make) to perform package management operations, it now reads variables from the file /etc/make.conf (again similar to ports) to determine where the Portage tree is kept.
Alternative package management utilities like Paludis and pkgcore have seen heavy development. Both are intended to be used alongside or instead of the official Portage utilities in both development and practical use. As both competing projects intend to replace the official utilities, an effort has been raised to standardise the application programming interface (API) of ebuilds for all package managers, in a project called the Package Manager Specification or PMS.[27]

Gentoo's init system is another important feature. It is similar to the System V init system that most Linux distributions use, but uses dependency-based scripts and named run levels rather than numbered ones. It also includes a command called rc-update which manages runlevels.
Gentoo startup scripts use the runscript shell interpreter, rather than a more traditional shell.
Originally Gentoo's rc system was written entirely in bash and was part of the baselayout package, which contains the basic filesystem layout and critical files needed for the system. However, this led to several limitations. For example, certain system calls needed to be accessed during boot which required C-based callouts to be added. These callouts were each statically linked, causing the rc system to bloat over time. Additionally, as Gentoo expanded to other platforms such as Gentoo/FreeBSD and Gentoo Embedded, requiring the relatively heavy bash shell for the rc system became undesirable or sometimes impossible.
This led to a development of baselayout 2, which was written in C and only required a POSIX-compliant shell. During this development, it was decided that it was a better fit if baselayout provided only the base files and filesystem layout for Gentoo, and the rc system was broken off into an independent project - OpenRC[28].

Gentoo may be installed in several ways. The most common way is to use the Gentoo minimal CD with a stage 3 tarball (see below for more explanation on stages). As with many Linux distributions, it can also be installed by most Linux flavors already operating.
As of version 2006.0, the Gentoo Foundation has released a GTK+ based installer to greatly simplify the process of installing the distribution from scratch.[2] More advanced users will note that the new installer also brings back the stage 1 installation (see below) as a common installation method.

Starting with 2004.0, Gentoo introduced a tool called Catalyst, which is used to build all Gentoo releases and can be used to build one's own customized install media.

Traditionally installation could be started from one of three base stages:
As of November 2005, only stage3 installations are officially supported.[29] Although tarballs for stage1 and stage2 are still distributed, the instructions for installing from these stages have been removed from the handbook[30] and put into the Gentoo FAQ[1].

A Live USB of Gentoo Linux can be created manually or with UNetbootin [31].

Even though the versioning system changed to years in 2004, the numbering version system still continues. For example, /etc/gentoo-release might contain "Gentoo Base System version 1.6.13" (Modified Aug. 26, 2005). These numbers are actually the version numbers of the sys-apps/baselayout package in Portage.
Once Gentoo is installed, it becomes "versionless"; that is, once an emerge update is done, the system is at the latest version, with the most up to date packages available (subject to any restrictions specified by the user in Portage configuration files). For example, if a system was installed from a 2005.0 CD, then when version 2005.1 is released an emerge update of the system effectively upgrades the installed Gentoo system to what would result from a fresh installation based on version 2005.1.
On September 22, 2008, it was announced that 2008.1 had been canceled and that weekly automated builds (Stage 3 and minimal CD) would be provided. Live CD and DVD may stay on an annual release cycle.[32] On 20 December 2008, the first weekly builds were published.[33]


Slow package installation – because compiling from source takes considerably more time than installing a pre-built package. This leads to longer initial installation if one does not make use of pre-built packages. In some extreme cases, like KDE and OpenOffice.org, compilation takes hours, [45][46] or even days on older hardware, and compiling some of these packages requires a few gigabytes of disk space.
Generally, Gentoo users accept these drawbacks as the cost of being able to apply their own compile-time options. Still, there are some pre-compiled binaries for large popular applications such as KDE, OpenOffice.org, and Mozilla Firefox. By using these binaries, one loses the chance to customize the choice of optional features for those packages, but the installation of the package is reduced to just a few minutes.
There are several approaches that may partially address the issue of long build times, like using multiple threads for the build process, using RAM-mounted filesystems or using distributed compilation, but many of these also have their own drawbacks or may not be applied in some cases.
The promise of optimization - Gentoo has long been criticized for its alleged promise of faster program execution[citation needed], as by design it allows the administrator to set compiler flags for the whole system. Some websites were expressly set up to satirize this "ricer" approach to computing.
In reality, compiler optimizations rarely benefit execution of a program to such an extent that it warrants compiling an entire operating system and application software[citation needed], instead of using precompiled packages as other (Linux) distributions normally do. Gentoo package management system does, however, offer options that allow users to install fewer (library) packages that applications would link to, which could ultimately result in a leaner, smaller operating environment which would at the very least result in a smaller installation. Program execution speed is not enhanced by this.
Requires a good Internet connection - This seems to be related to downloading sources prior to building packages. However, any other distribution that has internet updates has to download binary packages instead, and the sizes of binary and source packages are usually comparable.

A Gentoo is a species of penguin (and the penguin is the generic Linux mascot). The official Gentoo logo is a stylized G resembling a silver magatama[47]. Unofficial mascots include Larry The Cow.[25]


