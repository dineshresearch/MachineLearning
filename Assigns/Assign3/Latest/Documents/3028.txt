Metaprogramming
Metaprogramming is the writing of computer programs that write or manipulate other programs (or themselves) as their data, or that do part of the work at compile time that would otherwise be done at runtime. In many cases, this allows programmers to get more done in the same amount of time as they would take to write all the code manually, or it gives programs greater flexibility to efficiently handle new situations without recompilation.
The language in which the metaprogram is written is called the metalanguage. The language of the programs that are manipulated is called the object language. The ability of a programming language to be its own metalanguage is called reflection or reflexivity.
Reflection is a valuable language feature to facilitate metaprogramming. Having the programming language itself as a first-class data type (as in Lisp or Rebol) is also very useful. Generic programming invokes a metaprogramming facility within a language, in those languages supporting it.
Metaprogramming usually works through one of two ways. The first way is to expose the internals of the run-time engine to the programming code through application programming interfaces (APIs). The second approach is dynamic execution of string expressions that contain programming commands. Thus, "programs can write programs". Although both approaches can be used in the same language, most languages tend to lean toward one or the other.

A simple example of a metaprogram is this bash script, which is an example of generative programming:
This script (or program) generates a new 993-line program which prints out the numbers 1–992. This is only an illustration of how to use code to write more code; it is not the most efficient way to print out a list of numbers. Nonetheless, a programmer can write and execute this metaprogram in just a couple of minutes, and will have generated exactly 1000 lines of code in that amount of time.
Not all metaprogramming involves generative programming. If programs are modifiable at runtime or if an incremental compilation is available (such as in Lisp, Perl, Python, REBOL, Smalltalk, Ruby, PHP, Tcl, Lua, Groovy, and JavaScript), then techniques can be used to perform metaprogramming without actually generating source code.
The most common metaprogramming tool is a compiler which allows a programmer to write a relatively short program in a high-level language and uses it to write an equivalent assembly language or machine language program. This is a fundamental tool for programming since, in most cases, it is vastly impractical to write the machine language program directly.
While compilers translate from one language to another, other metaprogramming systems allow a single language to be programmatically manipulated. Macro systems are a simple but limited example of this approach.
Lisp is probably the quintessential language with metaprogramming facilities, both because of its historical precedence and because of the simplicity and power if its metaprogramming. In Lisp metaprogramming, the quasiquote operator (typically a comma) introduces code that is evaluated at program definition time rather than at run time. The metaprogramming language is thus identical to the host programming language, and existing Lisp routines can be directly reused for metaprogramming if desired.
This approach has been implemented in other languages by incorporating an interpreter in the program, which works directly with the program’s data. There are implementations of this kind for some common high-level languages, such as RemObject’s Pascal Script for Object Pascal.
Another still fairly common example of metaprogramming is the use of lex and yacc, two tools used to generate lexical analyzers and parsers. Yacc is often used as a compiler compiler, a tool to generate a tool for translating high-level language programs to machine language.
A quine is a special kind of metaprogram that produces its own source code as its output.
One style of programming which focuses heavily on metaprogramming is language-oriented programming, which is done via domain-specific programming languages.



