Cooperative Linux
Cooperative Linux, abbreviated as coLinux, is software which allows Microsoft Windows and the Linux kernel to run simultaneously in parallel on the same machine.[1]
Cooperative Linux utilizes the concept of a Cooperative Virtual Machine (CVM). In contrast to traditional VMs, the CVM shares resources that already exist in the host OS. In traditional (host) VMs, resources are virtualized for every (guest) OS. The CVM gives both OSs complete control of the host machine while the traditional VM sets every guest OS in an unprivileged state to access the real machine.

The term "cooperative" is used to describe two entities working in parallel. In effect Cooperative Linux turns the two different operating system kernels into two big coroutines. Each kernel has its own complete CPU context and address space, and each kernel decides when to give control back to its partner.
However, while both kernels theoretically have full access to the real hardware, modern PC hardware is not designed to be controlled by two different operating systems at the same time. Therefore the host kernel is left in control of the real hardware and the guest kernel contains special drivers that communicate with the host and provide various important devices to the guest OS. The host can be any OS kernel that exports basic primitives that allow the Cooperative Linux portable driver to run in CPL0 mode (ring 0) and allocate memory.

Dan Aloni originally started the development of Cooperative Linux based on similar work with User-mode Linux. He announced the development on 25 Jan 2004.[2] In July 2004 he presented a paper at the Linux Symposium.[3] The source was released under the GNU General Public License. Other developers have since contributed various patches and additions to the software.

Cooperative Linux is significantly different from full x86 virtualization, which generally work by running the guest OS in a less privileged mode than that of the host kernel, and having all resources delegated by the host kernel. In contrast, Cooperative Linux runs a specially modified Linux kernel that is Cooperative as in it takes responsibility for not instigating race conditions, and sharing resources with the NT kernel.

Most of the changes in the Cooperative Linux patch are on the i386 treeâ€”the only supported architecture for Cooperative at the time of this writing. The other changes are mostly additions of virtual drivers: cobd (block device), conet (network), and cocon (console). Most of the changes in the i386 tree involve the initialization and setup code. It is a goal of the Cooperative Linux kernel design to remain as close as possible to the standalone i386 kernel, so all changes are localized and minimized as much as possible.
The coLinux package installs a port of the Linux kernel and a virtual network device and can run simultaneously under a version of the Windows operating system such as Windows 2000 or Windows XP. It does not use a virtual machine such as VMware.
Debian, Ubuntu, Fedora and Gentoo are especially popular with the coLinux users.
Due to the rather unusual structure of the virtual hardware, installing Linux distributions under coLinux is generally difficult. Therefore users generally use either an existing Linux install on a real partition or ready made filesystem image distributed by the project. The filesystem images are made by a variety of methods, including taking images of a normal Linux system, finding ways to make installers run with the strange hardware, building installs up using the package manager by hand or simply upgrading existing images using tools like yum and apt. An easier way to get an up-to-date filesystem image is to use QEMU to install Linux and "convert" the image by stripping off the first 63 512-byte blocks as described in the coLinux wiki.
Since coLinux does not have access to native graphics hardware, X Window or X Servers will not run under coLinux directly, but you can install an X Server under Windows, such as Cygwin/X or Xming and use KDE or GNOME and almost any other Linux application and distribution.[4]



