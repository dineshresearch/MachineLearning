Geography Markup Language
The Geography Markup Language (GML) is the XML grammar defined by the Open Geospatial Consortium (OGC) to express geographical features. GML serves as a modeling language for geographic systems as well as an open interchange format for geographic transactions on the Internet. Note that the concept of feature in GML is a very general one and includes not only conventional "vector" or discrete objects, but also coverages (see also GMLJP2) and sensor data. The ability to integrate all forms of geographic information is key to the utility of GML.


Mr. Ron Lake started work on GML in the fall of 1998, following earlier work on XML encodings for radio broadcasting. Mr. Lake presented his early ideas to an OGC meeting in Atlanta, Georgia, in February 1999, under the title xGML. This introduced the idea of a GeoDOM, and the notion of Geographic Styling Language (GSL) based on XSL. Mr. Akifumi Nakai of NTT Data also presented at the same meeting on work partly underway at NTT Data on an XML encoding called G-XML, which was targeted at location–based services. In April 1999, Galdos created the XBed team (with CubeWerx, Oracle, MapInfo, NTT Data NTT Data, Mitsubishi, and Compusult as subcontractors). Xbed was focused on the use of XML for geospatial. This led to the creation of SFXML (Simple Features XML) with input from Galdos, US Census, and NTT Data. Galdos demonstrated an early map style engine pulling data from an Oracle-based "GML" data server (precursor of the WFS) at the first OGC Web Map Test Bed in September 1999. In October 1999, Galdos Systems rewrote the SFXML draft document into a Request for Comment, and changed the name of the language to GML (Geography Markup Language). This document introduced several key ideas that became the foundation of GML, including the 1) Object-Property-Value rule, 2) Remote properties (via rdf:resource), and 3) the decision to use application schemas rather than a set of static schemas. The paper also proposed that the language be based on the RDF (Resource Description Framework) rather than on the DTD’s used to that point. These issues, including the use of RDF, were hotly debated within the OGC community during 1999 and 2000, with the result that the final GML Recommendation Paper contained three GML profiles – two based on DTD, and one on RDF – with one of the DTD’s using a static schema approach. This passed as a Recommendation Paper at the OGC in May 2000.

Even before the passage of the Recommendation Paper at the OGC, Galdos had started work on an XML Schema version of GML, replacing the rdf:resource scheme for remote references with the use of xlink:href, and developing specific patterns (e.g. Barbarians at the Gate) for handling extensions for complex structures like feature collections. Much of the XML Schema design work was done by Mr. Richard Martell of Galdos who served as the document editor and who was mainly responsible for the translation of the basic GML model into an XML Schema. Other important inputs in this time frame came from Simon Cox (CSIRO Australia), Paul Daisey (US Census), David Burggraf (Galdos), and Adrian Cuthbert (Laser-Scan). The US Army Corps of Engineers (particularly Jeff Harrison) were quite supportive of the development of GML. The US Army Corp of Engineers sponsored the “USL Pilot” project, which was very helpful in exploring the utility of linking and styling concepts in the GML specification, with important work being done by Monie (Ionic) and Xia Li (Galdos). The XML Schema specification draft was submitted by Galdos and was approved for public distribution in December 2000. It became a Recommendation Paper in February 2001 and an Adopted Specification in May of the same year. This version (V2.0) eliminated the “profiles” from version 1. and established the key principles, as outlined in the original Galdos submission, as the basis of GML.

As these events were unfolding, work was continuing in parallel in Japan on G-XML under the auspices of the Japanese Database Promotion Center under the direction of Mr. Shige Kawano. G-XML and GML differed in several important respects. Targeted at LBS applications, G-XML employed many concrete geographic objects (e.g. Mover, POI), while GML provided a very limited concrete set and built more complex objects by the use of application schemas. At this point in time, G-XML was still written using a DTD, while GML had already transitioned to an XML Schema. On the one hand G-XML required the use of many fundamental constructs not at the time in the GML lexicon, including temporality, spatial references by identifiers, objects having histories, and the concept of topology-based styling. GML, on the other hand, offered a limited set of primitives (geometry, feature) and a recipe to construct user defined object (feature) types. Could the two languages be merged?
The beginning of the answer was reached at a set of meetings held in Tokyo in January 2001, and involving Ron Lake (Galdos), Richard Martell (Galdos), OGC Staff (Kurt Buehler, David Schell), Mr. Shige Kawano (DPC), Mr. Akifumi Nakai (NTT Data) and Dr. Shimada (Hitachi CRL). These meetings led to the signing of an MOU between DPC and OGC by which OGC would endeavour to inject the fundamental elements required to support G-XML into GML, thus enabling G-XML to be written as a GML application schema. This resulted in many new types entering GML’s core object list, including observations, dynamic features, temporal objects, default styles, topology, and viewpoints. Much of the work was conducted by Galdos under contract to NTT Data. This laid the foundation for GML 3, although a significant new development occurred in this time frame, namely the intersection of the OGC and ISO TC/211.

While a basic coding existed for most of the new objects introduced by the GML/G-XML agreement, and for some introduced by Galdos within the OGC process (notably coverages), it soon became apparent that few of these encodings were compliant with the abstract specifications developed by the ISO TC/211, specifications which were increasingly becoming the basis for all OGC specifications. GML geometry, for example, had been based on an earlier and only partly documented geometry model (Simple Features Geometry) and this was insufficient to support the more extensive and complex geometries described in TC/211. The management of GML development was also altered in this time frame with the participation of many more individuals.
In June 12, 2002, Mr. Ron Lake was recognized by the OGC for his work in creating GML by being presented the Gardels award[1]. The citation on the award reads “In particular, this award recognizes your great achievement in creating the Geography Markup Language, (GML), and your uniquely sensitive and effective work to promote the reconciliation of national differences to promote meaningful standardization of GML on a global level.” Simon Cox (CSIRO)[2] and Clemens Portele (Interactive Instruments)[3] also subsequently received the Gardels award, in part for their contributions to GML.

The Open Geospatial Consortium (OGC) is an international voluntary consensus standards organization whose members maintain the Geography Markup Language standard. The OGC coordinates with the ISO TC 211 standards organization to maintain consistency between OGC and ISO standards work. GML was adopted as an International Standard (ISO 19136:2007) in 2007.
GML is the XML data standard for the GeoWeb infrastructure, enabling Internet-connected devices to access geographical information, including, for example, merchant locations and traffic conditions.
GML can also be included in version 1.0 of the United States National Information Exchange Model.

The original GML model was based on the World Wide Web Consortium's Resource Description Framework (RDF). Subsequently, the OGC introduced XML schemas into GML's structure to help connect the various existing geographic databases, whose relational structure XML schemas more easily define. The resulting XML-schema-based GML retains many features of RDF, including the idea of child elements as properties of the parent object (RDFS) and the use of remote property references.
GML contains a rich set of primitives which are used to build application specific schemas or application languages. These primitives include:

GML profiles are logical restrictions to GML, and may be expressed by a document, an XML schema or both. These profiles are intended to simplify adoption of GML, to facilitate rapid adoption of the standard. The following profiles, as defined by the GML specification, have been published or proposed for public use:
Note that Profiles are distinct from application schemas. Profiles are part of GML namespaces (Open GIS GML) and define restricted subsets of GML. Application schemas are XML vocabularies defined using GML and which live in an application-defined target namespace. Application schemas can be built on specific GML profiles or use the full GML schema set.
Profiles are often created in support for GML derived languages (see application schemas) created in support of particular application domains such as commercial aviation, nautical charting or resource exploitation.
The GML Specification (Since GML v3.) contains a pair of XSLT scripts (usually referred to as the "subset tool") that can be used to construct GML profiles.

The GML Simple Features Profile is a more complete profile of GML than the above Point Profile and supports a wide range of vector feature objects, including the following:
Since the profile aims to provide a simple entry point, it does not provide support for the following:
Nonetheless it supports a good variety of real world problems.

In addition, the GML specification provides a subset tool to generate GML profiles containing a user-specified list of components. The tool consists of a pair of XSLT scripts. The scripts generate a profile that a developer may extend manually or otherwise enhance through schema restriction. Note that as restrictions of the full GML specification, application schemas that a profile can generate must themselves be valid GML application schemas.
The subset tool can generate profiles for many other reasons as well. Listing the elements and attributes to include in the resultant profile schema and running the tool results in a single profile schema file containing only the user-specified items and all of the element, attribute and type declarations on which the specified items depend. Some Profile schemas created in this manner support other specifications including IHO S-57 and GML in JPEG 2000.

In order to expose an application's geographic data with GML, a community or organization creates an XML schema specific to the application domain of interest(the application schema). This schema describes the object types whose data the community is interested in and which community applications must expose. For example, an application for tourism may define object types including monuments, places of interest, museums, road exits, and viewpoints in its application schema. Those object types in turn reference the primitive object types defined in the GML standard.
A list of known publicly available GML Application Schemas is being assembled.
Some other markup languages for geography use schema constructs, but GML builds on the existing XML schema model instead of creating a new schema language.

Note that the KML language made popular by Google is a complementary to GML. Whereas GML is a language to encode geographic content, by describing a spectrum of application objects and their properties (e.g. bridges, roads, buoys, vehicles etc), KML is a language for the visualization of geographic information. KML can be used to carry GML content, and GML can be "styled" to KML for the purposes of presentation.

GML encodes the GML geometries, or geometric characteristics, of geographic objects as elements within GML documents. The geometries of those objects may describe, for example, roads, rivers, and bridges.
The key GML geometry object types in GML 1.0 and GML 2.0, are the following:
Note that this geometry model is identical to the geometry model in KML.

GML defines features distinct from geometry objects. A feature is an application object that represents a physical entity, e.g. a building, a river, or a person. A feature may or may not have geometric aspects. A geometry object defines a location or region instead of a physical entity, and hence is different from a feature. The distinction between features and geometry objects in GML contrasts with models used in other geographic information systems (GIS) that make no such distinction. That is, although some other GIS define features and geometry objects interchangeably as items on a map, GML maintains them as separate entity types.
In GML, a feature can have various geometry properties that describe geometric aspects or characteristics of the feature (e.g. the feature's Point or Extent properties). GML also provides the ability for features to share a geometry property with one another by using a remote property reference on the shared geometry property. Remote properties are a general feature of GML borrowed from RDF. An xlink:href attribute on a GML geometry property means that the value of the property is the resource referenced in the link.
For example, a Building feature in a particular GML application schema might have a position given by the primitive GML geometry object type Point. However, the Building is a separate entity from the Point that defines its position. In addition, a feature may have several geometry properties (or none at all), for example an extent and a position.

Coordinates in GML represent the coordinates of geometry objects. Coordinates can be specified by any of the following GML elements:
GML has multiple ways to represent coordinates. For example, the <gml:coordinates> element can be used, as follows:
Note that, when expressed as above, the individual coordinates (e.g. 88.56) are not separately accessible through the XML Document Object Model since the content of the <gml:coordinates> element is just a single string.
To make GML coordinates accessible through the XML DOM, GML 3.0 introduced the <gml:pos> and <gml:posList> elements. (Note that although GML versions 1 and 2 had the <gml:coord> element, it is treated as a defect and is not used.) Using the <gml:pos> element instead of the <gml:coordinates> element, the same point can be represented as follows:
The coordinates of a <gml:LineString> geometry object can be represented with the <gml:coordinates> element:
The <gml:posList> element is used to represent a list of coordinate tuples, as required for linear geometries:
For GML data servers (WFS) and conversion tools that only support GML 1 or GML 2 (i.e. only the <gml:coordinates> element), there is no alternative to <gml:coordinates>. For GML 3 documents and later, however, <gml:pos> and <gml:posList> are preferable to <gml:coordinates>.
For more information on the srsName attribute, see Coordinate Reference System below.

A Coordinate Reference System (CRS) determines the geometry of each geometry element in a GML document.
Unlike KML or GeoRSS, GML does not default to a coordinate system when none is provided. Instead, the desired coordinate system must be specified explicitly with a Coordinate Reference System (CRS) or Spatial Reference System (SRS). The elements whose coordinates are interpreted with respect to such a CRS include the following:
An srsName attribute attached to a geometry object specifies the object's CRS, as shown in the following example:
The value of the srsName attribute is a Uniform Resource Identifier (URI). It refers to a definition of the Coordinate Reference System that is used to interpret the coordinates in the geometry. The CRS definition may be in a document (i.e. a flat file) or in an online web service.
The srsName URI may also be a Uniform Resource Name (URN) for referencing a common CRS definition. The OGC has developed a URN structure and a set specific URNs to encode some common Coordinate Reference Systems. A URN resolver resolves those URNs to GML CRS definitions.

Polygons, Points, and LineString objects are encoded in GML 1.0 and 2.0 as follows:
Note that LineString objects, along with LinearRing objects, assume linear interpolation between the specified points.

The following GML example illustrates the distinction between features and geometry objects. The Building feature has several geometry objects, sharing one of them (the Point with identifier p21) with the SurveyMonument feature:
Note that the reference is to the shared Point and not to the SurveyMonument, since any feature object can have more than one geometry object property.

The GML Point Profile contains a single GML geometry, namely a <gml:Point> object type. Any XML Schema can use the Point Profile by importing it and referencing the subject <gml:Point> instance:
Note that when using the Point Profile, the only geometry object is the '<gml:Point>' object. The rest of the geography is defined by the photo-collection schema.



