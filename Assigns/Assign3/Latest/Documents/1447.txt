Cutting stock problem
The cutting stock problem is an optimization problem, or more specifically, an integer linear programming problem. It arises from many applications in industry. Imagine that you work in a paper mill and you have a number of rolls of paper of fixed width waiting to be cut, yet different customers want different numbers of rolls of various-sized widths. How are you going to cut the rolls so that you minimize the waste (amount of left-overs)?
Solving this problem to optimality can be economically significant: a difference of 1% for a modern paper machine can be worth more than one million USD per year.

The standard formulation for the cutting stock problem (but not the only one) starts with a list of m orders, each requiring qj, j = 1,...,m pieces. We then construct a list of all possible combinations of cuts (often called "patterns"), associating with each pattern a positive integer variable xi representing how many times each pattern is to be used. The linear integer program is then:
where aij is the number of times order j appears in pattern i and ci is the cost (often the waste) of pattern i. The precise nature of the quantity constraints can lead to subtly different mathematical characteristics. The above formulation's quantity constraints are minimum constraints (at least the given amount of each order must be produced, but possibly more). In this case waste minimisation is equivalent to minimising the number of utilised master rolls. The most general formulation has two-sided constraints (for which minimising waste is no longer equivalent to minimising the number of master rolls):
This formulation applies not just to one-dimensional problems. Many variations are possible, including one where the objective is not to minimise the waste, but to maximise the total value of the produced items, allowing each order to have a different value.
In general, the number of possible patterns grows exponentially as a function of m, the number of orders. As the number of orders increases, it may therefore become impractical to enumerate the possible cutting patterns.
An alternative is to use a Delayed Column Generation approach. This method solves the cutting stock problem by starting with just a few patterns. It generates additional patterns when they are needed. For the one-dimensional case, the new patterns are introduced by solving an auxiliary optimization problem called the knapsack problem, using dual variable information from the linear program. The knapsack problem has well-known methods to solve it, such as branch and bound and dynamic programming. The Delayed Column Generation method can be much more efficient than the original approach, particularly as the size of the problem grows. The column generation approach was pioneered by Gilmore and Gomory in a series of papers published in the 1960's.[1] [2]. Gilmore and Gomory showed that this approach is guaranteed to converge to the (fractional) optimal solution, without needing to enumerate all the possible patterns in advance.
A limitation of the original Gilmore and Gomory method is that it does not handle integrality, so the solution may contain fractions, e.g. a particular pattern should be produced 3.67 times. Rounding to the nearest integer often does not work, in the sense that it may lead to a sub-optimal solution and/or under- or over-production of some of the orders (and possible infeasibility in the presence of two-sided demand constraints). This limitation is overcome in modern algorithms, which can solve to optimality (in the sense of finding solutions with minimum waste) very large instances of the problem (generally larger than encountered in practice[3] [4]).
The cutting stock problem is often highly degenerate, in that multiple solutions with the same waste are possible. This degeneracy arises because it is possible to move items around, creating new patterns, without affecting the waste. This give arise to a whole collection of related problems which are concerned with some other criterion, such as the following:

A paper machine can produce an unlimited number of master (jumbo) rolls, each 5600 mm wide. The following 13 items must be cut:

There are 308 possible patterns for this small instance. The optimal answer requires 73 master rolls and has 0.401% waste; it is believed that in this case the minimum number of patterns with this level of waste is 10 (one such solution is shown below and in the picture):

Cutting stock problems can be classified in several ways[8]. One way is the dimensionality of the cutting: the above example illustrates a one-dimensional (1D) problem; other industrial applications of 1D occur when cutting pipes, cables and steel bars. Two-dimensional (2D) problems are encountered in furniture, clothing and glass production. Not many three-dimensional (3D) applications involving cutting are known; however the closely related 3D packing problem has many industrial applications, such as packing objects into shipping containers (see e.g. containerization - the related sphere packing problem has been studied since the 17th century (Kepler conjecture)).

Industrial applications of the cutting stock problems for high production volumes arise especially when basic material is produced in large rolls that are further cut into smaller units. This is done e.g. in paper and plastic film industries but also in production of flat metals like steel or brass. There are many variants and additional constraints arising form special production constraints due to machinery and process limits, customer requirements and quality issues; some examples are:
Suppliers of such software to the paper industry include ABB Group, Greycon, Honeywell and Tieto.



