Cygwin
Cygwin (pronounced /ˈsɪɡwɪn/[1]) is a Unix-like environment and command-line interface for Microsoft Windows. Cygwin provides native integration of Windows-based applications, data, and other system resources with applications, software tools, and data of the Unix-like environment. Thus it is possible to launch Windows applications from the Cygwin environment, as well as to use Cygwin tools and applications within the Windows operating context.
Cygwin consists of two parts: a Dynamic-link library (DLL) as an API compatibility layer providing a substantial part of the POSIX API functionality, and an extensive collection of software tools and applications that provide a Unix-like look and feel.
Cygwin was originally developed by Cygnus Solutions and was acquired by Red Hat. Is released under the GNU General Public License. It is free software. Today it is maintained by employees of Red Hat, NetApp and many other volunteers. Corinna Vinschen and Christopher Faylor are currently the managers of the Cygwin development team.

Cygwin consists of a library that implements the POSIX system call API in terms of Win32 system calls, a GNU development toolchain (such as GCC and GDB) to allow software development, and a large number of application programs equivalent to those on the Unix system. Many Unix programs have been ported to Cygwin, including the X Window System, KDE, GNOME[2], Apache, and TeX. Cygwin permits installing inetd, syslogd, sshd, Apache, and other daemons as standard Windows services, allowing Microsoft Windows systems to emulate Unix and Linux servers.
Cygwin programs are installed by running Cygwin's "setup" program, which downloads the necessary program and feature package files from repositories on the Internet. Setup can install, update, and remove programs and their source code packages. A full installation may cost up to about 4 GB in the hard disk.
Efforts to reconcile concepts that differ between Unix and Windows systems include:
The version of gcc that comes with Cygwin has various extensions for creating Windows DLLs, specifying whether a program is a windowing or console mode program, adding resources, etc. It also provides support for compiling MinGW-compatible executables (that is, executables that do not require Cygwin to be installed to run, or more specifically, executables that don't require Cygwin's CYGWIN1.DLL, which provides the POSIX compatibility layer).
Cygwin is used heavily for porting many popular pieces of software to the Windows platform. It is used to compile Mozilla Firefox, Sun Java, OpenOffice.org, and even server software, like lighttpd.
Red Hat normally licenses the Cygwin library under the GNU General Public License with an exception to allow linking to any free software whose license conforms to the Open Source Definition. Red Hat also sells commercial licenses to those who wish to redistribute programs that use the Cygwin library under proprietary terms.

Cygwin began in 1995 as a project of Steve Chamberlain, a Cygnus engineer who observed that Windows NT and 95 used COFF as their object file format, and that GNU already included support for x86 and COFF, and the C library newlib. He thought it would be possible to retarget GCC and produce a cross compiler generating executables that could run on Windows. This proved indeed practical and a prototype was quickly developed.
The next step was to attempt to bootstrap the compiler on a Windows system, requiring sufficient emulation of Unix to let the GNU configure shell script run. A Bourne shell-compatible command interpreter, such as bash, was needed and in turn a fork system call emulation and standard input/output. Windows includes similar functionality, so the Cygwin library just needed to provide a POSIX-compatible application programming interface (API) and properly translate calls and manage private versions of data, such as file descriptors.
Initially, Cygwin was called gnuwin32 (not to be confused with the current GnuWin32 project). The name was changed to Cygwin32 to emphasize Cygnus' role in creating it. When Microsoft registered the trademark Win32, the 32 was dropped to simply become Cygwin.
By 1996, other engineers had joined in, because it was clear that Cygwin would be a useful way to provide Cygnus' embedded tools hosted on Windows systems (the previous strategy had been to use DJGPP). It was especially attractive because it was possible to do a three-way cross-compile, for instance to use a hefty Sun workstation to build, say, a Windows-x-MIPS cross-compiler, which was faster than using the PC of the time. Starting around 1998, Cygnus also began offering the Cygwin package as a product of interest in its own right.


Cygnix is a limited X11 environment based on Cygwin. Its name is an abbreviation of "CYGnus pseudo-uNIX".
There are implementations of Cygnix in Windows 95 / 98 / ME and Windows NT / 2000 / XP.
There was also a package called Cygnix for AmigaOS 4.0. It is now renamed to AmiCygnix. This package is not based on Cygnix for Windows. It is based on a X server port for AmigaOS 3.x for 68k Amigas.

Extensions to Cygwin are available, such as Cygwin/X, a port of the X Window System, and in turn, the KDE Desktop as KDE on Cygwin. However KDE on Cygwin has been phased out as KDE 4 has been ported to run natively on Windows.[3]

Several open-source and proprietary alternatives are available for simultaneous access to both Windows and UNIX environments on the same hardware.
Toolsets like Microsoft Windows Services for UNIX, UWIN and MKS Toolkit for Enterprise Developers also aim to provide a Unix-like user and development environment. They implement at least a shell, several utilities, including the familiar GNU and/or Unix compiler tools, including make and the complete C programming environment. MKS Toolkit for System Administrators, GnuWin32 and UnxUtils only provide a Unix-like user environment, not a development environment. MKS Toolkit for Developers has both a Unix-like user environment and a Unix-like development environment for Windows development.
MinGW is a native software port of the GNU Compiler Collection (GCC) to Microsoft Windows, along with a set of freely distributable import libraries and header files for the Windows API. MinGW allows developers to create native Microsoft Windows applications. In addition, a component of MinGW known as MSYS (Minimal SYStem) provides a lightweight Unix-like shell environment including rxvt and a selection of POSIX tools sufficient to enable autoconf scripts to run.[5][6]
Qt (pronounced "cute" by its creators[7]) is a cross-platform application development framework, widely used for the development of GUI programs (in which case it is known as a widget toolkit), and also used for developing non-GUI programs such as console tools and servers. PWLib is a multi-platform code library that can be used to write applications that will compile and run on the BSD Unixes, Windows, Linux and a few other Unix variants which is used by the OpenH323 library.
In addition, there are numerous virtualization solutions that provide x86 platform virtualization to run Windows and Unix-like operating systems simultaneously on the same hardware, but without the integration of the environments that Cygwin provides. Some, like VirtualBox and VMware Player run on Windows and Linux hosts and can run many other operating systems. Cooperative Linux (in short coLinux) runs a full, but modified Linux kernel like a driver under Windows, effectively making Windows and Linux two coroutines, using cooperative multitasking to switch between them. However, as of January 2009, coLinux has not reached a stable release.
Wine is a free compatibility layer for Unix-like operating systems on the x86 or x86-64 architecture that can execute programs written for Microsoft Windows.




