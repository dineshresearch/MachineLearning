OpenType
OpenType is a scalable format for computer fonts initially developed by Microsoft, with Adobe Systems later joining in. OpenType as a technology was announced publicly in 1996 and had a significant number of OpenType fonts shipping by 2000â€“2001. Adobe completed conversion of its entire font library to OpenType around the end of 2002. As of early 2005[update], there were around 10,000 fonts available in OpenType format, with Adobe's library making up under a third of the total. By 2006, every major font foundry and many minor ones were developing fonts in OpenType format.

OpenType is intended by Microsoft and Adobe to supersede both the TrueType and the Type 1 ("PostScript") font formats. TrueType was developed by Apple Computer and licensed by Microsoft, and PostScript and the Type 1 format were developed by Adobe. Needing a more expressive font format to handle fine typography and exotic behavior of many of the world's written scripts, the two companies combined the underlying technologies of both formats and added new extensions intended to address the limitations.
OpenType's origins date to Microsoft's attempt to license Apple's advanced typography technology, "GX Typography," in the early 1990s. Those negotiations failed, motivating Microsoft to forge ahead with its own technology, dubbed "TrueType Open," in 1994.[1] Adobe joined Microsoft in those efforts in 1996, adding support for the glyph outline technology used in its Type 1 fonts. The name OpenType was chosen for the combined technologies.
Adobe and Microsoft continued to develop and refine OpenType over the next decade. Then, in late 2005, OpenType began migrating to an open standard under the International Organization for Standardization (ISO) within the MPEGgroup, which had previously adopted OpenType by reference. The new standard is essentially OpenType 1.4, with appropriate language changes for ISO, and is called the "Open Font Format." Adoption of the new standard reached formal approval in March 2007 as ISO Standard ISO/IEC 14496-22.[2]

OpenType uses the general "sfnt" structure of a TrueType font, but it adds several smartfont options that enhance the font's typographic and language support capabilities. The glyph outline data in an OpenType font may be in one of two formats: either TrueType format outlines in a 'glyf' table, or Compact Font Format (CFF) outlines in a 'CFF ' table. CFF outline data is based on the PostScript language Type 2 font format. The table name 'CFF ' is four characters long, ending in a space character. However, the OpenType specification does not support the use of PostScript outlines in a TrueType Collection font file.
For many purposes, such as layout, it doesn't matter what the outline data format is, but for some purposes, such as rasterisation, it is significant. The term "OpenType" doesn't specify outline data format. Sometimes terms like "OpenType (PostScript flavor)", "Type 1 OpenType", "OpenType CFF", or "OpenType (TrueType flavor)" are used to indicate which outline format a particular OpenType font contains.
OpenType has several distinctive features:

Compared with Apple Computer's "GX Typography"â€”now called Apple Advanced Typography (AAT)â€”OpenType is less flexible in typographic options, but superior in language-related options and support.[clarification needed]
OpenType has been much more successful than AAT. There are many more fonts and supporting applications, despite AAT being an older technology. The single-platform nature of AAT and the lack of support from any major software vendor other than Apple itself are both likely factors in this.[citation needed]
From a font developer's perspective, OpenType is, for many common situations, easier to develop for than AAT. First, the simple declarative substitutions and positioning of OpenType are more readily understood than AAT's more complex (but powerful) state tables. Second, Adobe's strategy of licensing at no charge the source code developed for its own font development, AFDKO (Adobe Font Development Kit for OpenType), allowed third-party font editing applications such as FontLab and FontMaster to add support with relative ease. Although Adobe's text-driven coding support is not as visual as Microsoft's separate tool, VOLT (Visual OpenType Layout Tool), the integration with the tools being used to make the fonts has been well received.
Another difference is that an OpenType support framework (such as Microsoft's Uniscribe) needs to provide a fair bit of knowledge about special language processing issues to handle (for example: Arabic). With AAT, the font developer of an AAT font has to encapsulate all that expertise in the font. This means that AAT can handle any arbitrary language, but that it requires more work and expertise from the font developers. On the other hand, OpenType fonts are easier to make, but can only support complex scripts if the application or operating system knows how to handle them.
Prior to supporting OpenType, Adobe promoted multiple master fonts for high-end typography. Multiple master fonts lacked the controls for alternate glyphs and languages provided by OpenType, but provided more control over glyph shape.


OpenType support may be divided into several categories[citation needed]: virtually all applications and most modern operating systems have basic Roman support and work with OpenType fonts just as well as other, older formats. What is of particular interest apart from basic Roman support is: Extended language support through Unicode, support for "complex" writing scripts such as Arabic and the Indic languages, and advanced typographic support for Latin script languages such as English.
Amongst Microsoft's operating systems, OpenType TT fonts (.TTF) are backward compatible and therefore supported by all Windows versions starting with Windows 3.1. OpenType PS fonts (.OTF) are supported in all Windows versions starting with Windows 2000; Adobe Type Manager is required to be installed on Windows 95/98/NT/Me for basic Roman support (only) of OpenType PS fonts.

Extended language support via Unicode for both OpenType and TrueType is present in most Windows applications (including Microsoft Office Publisher, most Adobe applications, and Microsoft Office 2003, though not Word 2002), and many Mac OS X applications, including Apple's own such as TextEdit, Pages and Keynote. OpenType is fully supported on Mac OS X by the word processor Mellel.
OpenType support for complex written scripts has so far mainly appeared in Microsoft applications in Microsoft Office, such as Microsoft Word and Microsoft Publisher. Adobe InDesign provides extensive OpenType capability in Japanese but does not directly support Middle Eastern or Indic scriptsâ€” though a separate version of InDesign is available that supports Middle Eastern scripts such as Arabic and Hebrew. Undocumented functionality in many Adobe Creative Suite 4 applications, including InDesign, Photoshop and Illustrator, enables Middle Eastern, Indic and other languages, but is not officially supported by Adobe, and requires third-party plug-ins to provide a user interface for the features.

Advanced typographic support for Latin script languages first appeared in Adobe applications such as Adobe InDesign, Adobe Photoshop and Adobe Illustrator. QuarkXPress 6.5 and below (Quark, Inc.) were not Unicode compliant. Hence text that contains anything other than WinANSI/MacRoman characters will not display correctly in an OpenType font (nor in other Unicode font formats, for that matter). However, Quark offers support similar to Adobe's in QuarkXPress 7, which shipped in May 2006. Corel'sCorelDRAW does not support OpenType typographic features, either.
Strangely, on Windows, all available word processors, including Microsoft Office Word, lack advanced OpenType typography features. Advanced typography features are implemented only in high-end desktop publishing software and not present in any of the word processors. However, the text engine from Windows Presentation Foundation, which is a managed code implementation of OpenType is the first Windows API to expose OpenType features to software developers, supporting both OpenType TrueType, and OpenType CFF (Compact Font Format) fonts. It supports advanced typographic features such as ligatures, old-style numerals, swash variants, fractions, superscript and subscript, small capitalization, glyph substitution, multiple baselines, contextual and stylistic alternate character forms, kerning, line-level justification, ruby characters etc. WPF applications automatically gain support of advanced typography features.
Windows 7 will introduce DirectWrite, a hardware accelerated native DirectX API for text rendering with support for multi-format text, resolution-independent outline fonts, ClearType, advanced OpenType typography features, full Unicode text, layout and language support and low-level glyph rendering APIs. [3]
On Mac OS X, AAT-supporting applications running on Mac OS X 10.4 and later, including TextEdit and Keynote, get considerable OpenType support. Apple's support for OpenType in Mac OS X 10.4 included most advanced typographic features necessary for Latin script languages, such as small caps, oldstyle figures, and various sorts of ligatures. It did not yet support contextual alternates, positional forms, nor glyph reordering as handled by Microsoft's Uniscribe library on Windows. Thus, Mac OS X 10.4 did not offer support for Arabic or Indic scripts via OpenType (though such scripts are fully supported by existing AAT fonts). Mac OS X 10.5 has improved support for OpenType and supports Arabic OpenType fonts.
Bitstream Panorama, a line layout and text composition engine from Bitstream Inc., provides complete OpenType support for compact and standard Asian fonts, Arabic, Hebrew, Indic, Thai and over 50 other worldwide languages. The application supports key OpenType tables required for line layout, such as BASE, glyph definition (GDEF), glyph positioning (GPOS), and glyph substitution (GSUB). Panorama also offers complete support for advanced typography features, such as ligatures, swashes, small caps, ornaments, ordinals, superiors, old style, kerning, fractions, etc.
In free software environments like Linux, OpenType rendering is provided by the FreeType project, included in free implementations of the X Window System such as Xorg. Complex text handling is provided either by pango or Qt. The XeTeX system allows TeX documents to use OpenType fonts, along with most of their typographic features.

OpenType features are tedious to define using a GUI.[4] Consequently, Adobe standardized[5] a text specification format for feature files, which typically have a name ending in a .fea extension. These files can be compiled into the binary font container (.ttf or .otf) using Adobe FDK (AFDKO), FontLab or FontForge. The latter program implements a few features that are documented in the Adobe standard but are not implemented by AFDKO, and also supports some (proprietary) extensions.[6]

OpenType Layout tags are 4-byte character strings that identify the scripts, language systems, features and baselines in an OpenType Layout font. Microsoft's Layout tag registry establishes conventions for naming and using these tags. OpenType features are created by using the tags in creating feature scripts that describe how characters are to be manipulated to make the desired feature. These feature scripts can be created and incorporated into OpenType fonts by advanced font editors such as FontLab Studio, AsiaFont Studio, and FontForge.
Operating system and application support for layout tags varies widely. A 2007 presentation[7] summarizing the state of affairs was given by JÃ¼rgen Willrodt at TypoTechnica 2007.

Script tags identify the scripts (writing systems) represented in an OpenType typeface. Each tag corresponds to contiguous character code ranges in Unicode. A script tag can consist of 4 or fewer lowercase letters. Examples include arab for the Arabic alphabet, cyrl for the Cyrillic alphabet, latn for the Latin alphabet, etc. A special math script was added by Microsoft in Cambria Math. This has not yet been standardized.

Language system tags identify the language systems supported in an OpenType typeface. Examples include ARA for Arabic, ESP for Spanish, HYE for Armenian, etc. The codes are not in general the same as ISO 639-2 codes.

OpenType has long list of feature tags. An abbreviated list of the most important features, sorted by their English description is given in the OpenType section of the List of typographic features. The complete OpenType feature list, sorted by tag, has its own page OpenType feature tag list.
For a list of OpenType features supported by Mac OS X look here.

Baseline tags have a specific meaning when used in the horizontal writing direction (used in the 'BASE' table's HorizAxis table), vertical writing direction (used in the 'BASE' table's VertAxis table), or both.

In 2005, Adobe shipped a new technology in their Creative Suite applications bundle that offers a solution for the gaiji (Japanese for "outside character") problem. Ideographic writing scripts such as Chinese and Japanese do not have fixed collections of characters. They use thousands of glyphs commonly and tens of thousands less commonly. Not all glyphs ever invented and used in far eastern literature have even been catalogued. A typical font might contain 8,000 to 15,000 of the most commonly used glyphs. From time to time, though, an author needs a glyph not present in the font of choice. Such missing characters are known in Japan as gaiji, and they often disrupt work.
Another aspect of the gaiji problem is that of variant glyphs for certain characters. Often certain characters have been written differently over periods of time. It is not unusual for place names or personal family names to use a historical form of a character. Thus it is possible for an end user using standard fonts to be left unable to spell correctly either their own name or the name of the place where they live.
Several ways to deal with gaiji have been devised. Solutions that treat them as characters usually assign arbitrary Unicode values to them in the Private Use Area (PUA). Such characters cannot be used outside the environment in which the association of the private Unicode to the glyph shape is known. Documents based on them are not portable. Other installations treat gaiji as graphics. This can be cumbersome because text layout and composition cannot apply to graphics. They cannot be searched for. Often their rendering looks different from surrounding characters because the machinery for rendering graphics usually is different from the machinery for rendering glyphs from fonts.
The SING technology that made its debut with Adobe's Creative Suite 2 allows for the creation of glyphs, each packaged as a standalone font, after a fashion. Such a packaged glyph is called a glyphlet. The format, which Adobe has made public, is based on OpenType. The package consists of the glyph outline in TrueType or CFF (PostScript style outlines) form; standard OpenType tables declaring the glyph's metrics and behavior in composition; and metadata, extra information included for identifying the glyphlet, its ownership, and perhaps pronunciation or linguistic categorization. SING glyphlets can be created using Fontlab's SigMaker3 application.
The SING (Smart INdependent Glyphlets) specification states that glyphlets are to travel with the document they are used in. That way documents are portable, leaving no danger of characters in the document that cannot be displayed. Because glyphlets are essentially OpenType fonts, standard font machinery can render them. The SING specification also describes an XMLformat that includes all the data necessary for reconstituting the glyphlet in binary form. A typical glyphlet might require 1 to 2 kilobytes to represent.



